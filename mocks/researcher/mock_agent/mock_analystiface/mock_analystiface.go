// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/researcher/agent/analystiface/iface.go

// Package mock_analystiface is a generated GoMock package.
package mock_analystiface

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/jecolasurdo/tbtlarchivist/pkg/contracts"
	reflect "reflect"
)

// MockAnalystAPI is a mock of AnalystAPI interface
type MockAnalystAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAnalystAPIMockRecorder
}

// MockAnalystAPIMockRecorder is the mock recorder for MockAnalystAPI
type MockAnalystAPIMockRecorder struct {
	mock *MockAnalystAPI
}

// NewMockAnalystAPI creates a new mock instance
func NewMockAnalystAPI(ctrl *gomock.Controller) *MockAnalystAPI {
	mock := &MockAnalystAPI{ctrl: ctrl}
	mock.recorder = &MockAnalystAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalystAPI) EXPECT() *MockAnalystAPIMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockAnalystAPI) Run(arg0 context.Context, arg1 *contracts.PendingResearchItem) (<-chan *contracts.CompletedResearchItem, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(<-chan *contracts.CompletedResearchItem)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockAnalystAPIMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAnalystAPI)(nil).Run), arg0, arg1)
}
