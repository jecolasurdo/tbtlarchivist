// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(unused_attributes)]
#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protobuf/contracts.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq, Clone, Default)]
pub struct ClipInfo {
    // message fields
    pub initial_date_curated: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_date_curated: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub curator_information: ::std::string::String,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub media_uri: ::std::string::String,
    pub media_type: ::std::string::String,
    pub priority: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClipInfo {
    fn default() -> &'a ClipInfo {
        <ClipInfo as ::protobuf::Message>::default_instance()
    }
}

impl ClipInfo {
    pub fn new() -> ClipInfo {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp initial_date_curated = 1;

    pub fn get_initial_date_curated(&self) -> &::protobuf::well_known_types::Timestamp {
        self.initial_date_curated.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_initial_date_curated(&mut self) {
        self.initial_date_curated.clear();
    }

    pub fn has_initial_date_curated(&self) -> bool {
        self.initial_date_curated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_date_curated(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.initial_date_curated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_date_curated(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.initial_date_curated.is_none() {
            self.initial_date_curated.set_default();
        }
        self.initial_date_curated.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_date_curated(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.initial_date_curated
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_date_curated = 2;

    pub fn get_last_date_curated(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_date_curated.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_last_date_curated(&mut self) {
        self.last_date_curated.clear();
    }

    pub fn has_last_date_curated(&self) -> bool {
        self.last_date_curated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_date_curated(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_date_curated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_date_curated(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_date_curated.is_none() {
            self.last_date_curated.set_default();
        }
        self.last_date_curated.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_date_curated(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_date_curated
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string curator_information = 3;

    pub fn get_curator_information(&self) -> &str {
        &self.curator_information
    }
    pub fn clear_curator_information(&mut self) {
        self.curator_information.clear();
    }

    // Param is passed by value, moved
    pub fn set_curator_information(&mut self, v: ::std::string::String) {
        self.curator_information = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curator_information(&mut self) -> &mut ::std::string::String {
        &mut self.curator_information
    }

    // Take field
    pub fn take_curator_information(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curator_information, ::std::string::String::new())
    }

    // string title = 4;

    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 5;

    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string media_uri = 6;

    pub fn get_media_uri(&self) -> &str {
        &self.media_uri
    }
    pub fn clear_media_uri(&mut self) {
        self.media_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_media_uri(&mut self, v: ::std::string::String) {
        self.media_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_uri(&mut self) -> &mut ::std::string::String {
        &mut self.media_uri
    }

    // Take field
    pub fn take_media_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.media_uri, ::std::string::String::new())
    }

    // string media_type = 7;

    pub fn get_media_type(&self) -> &str {
        &self.media_type
    }
    pub fn clear_media_type(&mut self) {
        self.media_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_media_type(&mut self, v: ::std::string::String) {
        self.media_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_type(&mut self) -> &mut ::std::string::String {
        &mut self.media_type
    }

    // Take field
    pub fn take_media_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.media_type, ::std::string::String::new())
    }

    // int32 priority = 8;

    pub fn get_priority(&self) -> i32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = v;
    }
}

impl ::protobuf::Message for ClipInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.initial_date_curated {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.last_date_curated {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.initial_date_curated,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.last_date_curated,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.curator_information,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.title,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.description,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.media_uri,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.media_type,
                    )?;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.priority = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.initial_date_curated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_date_curated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.curator_information.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.curator_information);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.description);
        }
        if !self.media_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.media_uri);
        }
        if !self.media_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.media_type);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(
                8,
                self.priority,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.initial_date_curated.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_date_curated.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.curator_information.is_empty() {
            os.write_string(3, &self.curator_information)?;
        }
        if !self.title.is_empty() {
            os.write_string(4, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(5, &self.description)?;
        }
        if !self.media_uri.is_empty() {
            os.write_string(6, &self.media_uri)?;
        }
        if !self.media_type.is_empty() {
            os.write_string(7, &self.media_type)?;
        }
        if self.priority != 0 {
            os.write_int32(8, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClipInfo {
        ClipInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "initial_date_curated",
                    |m: &ClipInfo| &m.initial_date_curated,
                    |m: &mut ClipInfo| &mut m.initial_date_curated,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "last_date_curated",
                    |m: &ClipInfo| &m.last_date_curated,
                    |m: &mut ClipInfo| &mut m.last_date_curated,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "curator_information",
                |m: &ClipInfo| &m.curator_information,
                |m: &mut ClipInfo| &mut m.curator_information,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "title",
                |m: &ClipInfo| &m.title,
                |m: &mut ClipInfo| &mut m.title,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "description",
                |m: &ClipInfo| &m.description,
                |m: &mut ClipInfo| &mut m.description,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "media_uri",
                |m: &ClipInfo| &m.media_uri,
                |m: &mut ClipInfo| &mut m.media_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "media_type",
                |m: &ClipInfo| &m.media_type,
                |m: &mut ClipInfo| &mut m.media_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "priority",
                |m: &ClipInfo| &m.priority,
                |m: &mut ClipInfo| &mut m.priority,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClipInfo>(
                "ClipInfo",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static ClipInfo {
        static instance: ::protobuf::rt::LazyV2<ClipInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClipInfo::new)
    }
}

impl ::protobuf::Clear for ClipInfo {
    fn clear(&mut self) {
        self.initial_date_curated.clear();
        self.last_date_curated.clear();
        self.curator_information.clear();
        self.title.clear();
        self.description.clear();
        self.media_uri.clear();
        self.media_type.clear();
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClipInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClipInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct EpisodeInfo {
    // message fields
    pub initial_date_curated: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_date_curated: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub curator_information: ::std::string::String,
    pub date_aired: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub media_uri: ::std::string::String,
    pub media_type: ::std::string::String,
    pub priority: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EpisodeInfo {
    fn default() -> &'a EpisodeInfo {
        <EpisodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl EpisodeInfo {
    pub fn new() -> EpisodeInfo {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp initial_date_curated = 1;

    pub fn get_initial_date_curated(&self) -> &::protobuf::well_known_types::Timestamp {
        self.initial_date_curated.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_initial_date_curated(&mut self) {
        self.initial_date_curated.clear();
    }

    pub fn has_initial_date_curated(&self) -> bool {
        self.initial_date_curated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_date_curated(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.initial_date_curated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_date_curated(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.initial_date_curated.is_none() {
            self.initial_date_curated.set_default();
        }
        self.initial_date_curated.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_date_curated(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.initial_date_curated
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_date_curated = 2;

    pub fn get_last_date_curated(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_date_curated.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_last_date_curated(&mut self) {
        self.last_date_curated.clear();
    }

    pub fn has_last_date_curated(&self) -> bool {
        self.last_date_curated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_date_curated(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_date_curated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_date_curated(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_date_curated.is_none() {
            self.last_date_curated.set_default();
        }
        self.last_date_curated.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_date_curated(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_date_curated
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string curator_information = 3;

    pub fn get_curator_information(&self) -> &str {
        &self.curator_information
    }
    pub fn clear_curator_information(&mut self) {
        self.curator_information.clear();
    }

    // Param is passed by value, moved
    pub fn set_curator_information(&mut self, v: ::std::string::String) {
        self.curator_information = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_curator_information(&mut self) -> &mut ::std::string::String {
        &mut self.curator_information
    }

    // Take field
    pub fn take_curator_information(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.curator_information, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp date_aired = 4;

    pub fn get_date_aired(&self) -> &::protobuf::well_known_types::Timestamp {
        self.date_aired.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_date_aired(&mut self) {
        self.date_aired.clear();
    }

    pub fn has_date_aired(&self) -> bool {
        self.date_aired.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date_aired(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.date_aired = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date_aired(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.date_aired.is_none() {
            self.date_aired.set_default();
        }
        self.date_aired.as_mut().unwrap()
    }

    // Take field
    pub fn take_date_aired(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.date_aired
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string title = 5;

    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 6;

    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string media_uri = 7;

    pub fn get_media_uri(&self) -> &str {
        &self.media_uri
    }
    pub fn clear_media_uri(&mut self) {
        self.media_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_media_uri(&mut self, v: ::std::string::String) {
        self.media_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_uri(&mut self) -> &mut ::std::string::String {
        &mut self.media_uri
    }

    // Take field
    pub fn take_media_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.media_uri, ::std::string::String::new())
    }

    // string media_type = 8;

    pub fn get_media_type(&self) -> &str {
        &self.media_type
    }
    pub fn clear_media_type(&mut self) {
        self.media_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_media_type(&mut self, v: ::std::string::String) {
        self.media_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_type(&mut self) -> &mut ::std::string::String {
        &mut self.media_type
    }

    // Take field
    pub fn take_media_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.media_type, ::std::string::String::new())
    }

    // int32 priority = 9;

    pub fn get_priority(&self) -> i32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = v;
    }
}

impl ::protobuf::Message for EpisodeInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.initial_date_curated {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.last_date_curated {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.date_aired {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.initial_date_curated,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.last_date_curated,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.curator_information,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.date_aired,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.title,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.description,
                    )?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.media_uri,
                    )?;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.media_type,
                    )?;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int32()?;
                    self.priority = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.initial_date_curated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_date_curated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.curator_information.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.curator_information);
        }
        if let Some(ref v) = self.date_aired.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if !self.media_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.media_uri);
        }
        if !self.media_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.media_type);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(
                9,
                self.priority,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.initial_date_curated.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_date_curated.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.curator_information.is_empty() {
            os.write_string(3, &self.curator_information)?;
        }
        if let Some(ref v) = self.date_aired.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.title.is_empty() {
            os.write_string(5, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if !self.media_uri.is_empty() {
            os.write_string(7, &self.media_uri)?;
        }
        if !self.media_type.is_empty() {
            os.write_string(8, &self.media_type)?;
        }
        if self.priority != 0 {
            os.write_int32(9, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EpisodeInfo {
        EpisodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "initial_date_curated",
                    |m: &EpisodeInfo| &m.initial_date_curated,
                    |m: &mut EpisodeInfo| &mut m.initial_date_curated,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "last_date_curated",
                    |m: &EpisodeInfo| &m.last_date_curated,
                    |m: &mut EpisodeInfo| &mut m.last_date_curated,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "curator_information",
                |m: &EpisodeInfo| &m.curator_information,
                |m: &mut EpisodeInfo| &mut m.curator_information,
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "date_aired",
                    |m: &EpisodeInfo| &m.date_aired,
                    |m: &mut EpisodeInfo| &mut m.date_aired,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "title",
                |m: &EpisodeInfo| &m.title,
                |m: &mut EpisodeInfo| &mut m.title,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "description",
                |m: &EpisodeInfo| &m.description,
                |m: &mut EpisodeInfo| &mut m.description,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "media_uri",
                |m: &EpisodeInfo| &m.media_uri,
                |m: &mut EpisodeInfo| &mut m.media_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "media_type",
                |m: &EpisodeInfo| &m.media_type,
                |m: &mut EpisodeInfo| &mut m.media_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt32,
            >(
                "priority",
                |m: &EpisodeInfo| &m.priority,
                |m: &mut EpisodeInfo| &mut m.priority,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EpisodeInfo>(
                "EpisodeInfo",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static EpisodeInfo {
        static instance: ::protobuf::rt::LazyV2<EpisodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EpisodeInfo::new)
    }
}

impl ::protobuf::Clear for EpisodeInfo {
    fn clear(&mut self) {
        self.initial_date_curated.clear();
        self.last_date_curated.clear();
        self.curator_information.clear();
        self.date_aired.clear();
        self.title.clear();
        self.description.clear();
        self.media_uri.clear();
        self.media_type.clear();
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EpisodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EpisodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct PendingResearchItem {
    // message fields
    pub lease_id: ::std::string::String,
    pub episode: ::protobuf::SingularPtrField<EpisodeInfo>,
    pub clips: ::protobuf::RepeatedField<ClipInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PendingResearchItem {
    fn default() -> &'a PendingResearchItem {
        <PendingResearchItem as ::protobuf::Message>::default_instance()
    }
}

impl PendingResearchItem {
    pub fn new() -> PendingResearchItem {
        ::std::default::Default::default()
    }

    // string lease_id = 1;

    pub fn get_lease_id(&self) -> &str {
        &self.lease_id
    }
    pub fn clear_lease_id(&mut self) {
        self.lease_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_lease_id(&mut self, v: ::std::string::String) {
        self.lease_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lease_id(&mut self) -> &mut ::std::string::String {
        &mut self.lease_id
    }

    // Take field
    pub fn take_lease_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lease_id, ::std::string::String::new())
    }

    // .contracts.EpisodeInfo episode = 2;

    pub fn get_episode(&self) -> &EpisodeInfo {
        self.episode
            .as_ref()
            .unwrap_or_else(|| <EpisodeInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_episode(&mut self) {
        self.episode.clear();
    }

    pub fn has_episode(&self) -> bool {
        self.episode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_episode(&mut self, v: EpisodeInfo) {
        self.episode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_episode(&mut self) -> &mut EpisodeInfo {
        if self.episode.is_none() {
            self.episode.set_default();
        }
        self.episode.as_mut().unwrap()
    }

    // Take field
    pub fn take_episode(&mut self) -> EpisodeInfo {
        self.episode.take().unwrap_or_else(|| EpisodeInfo::new())
    }

    // repeated .contracts.ClipInfo clips = 3;

    pub fn get_clips(&self) -> &[ClipInfo] {
        &self.clips
    }
    pub fn clear_clips(&mut self) {
        self.clips.clear();
    }

    // Param is passed by value, moved
    pub fn set_clips(&mut self, v: ::protobuf::RepeatedField<ClipInfo>) {
        self.clips = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clips(&mut self) -> &mut ::protobuf::RepeatedField<ClipInfo> {
        &mut self.clips
    }

    // Take field
    pub fn take_clips(&mut self) -> ::protobuf::RepeatedField<ClipInfo> {
        ::std::mem::replace(&mut self.clips, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PendingResearchItem {
    fn is_initialized(&self) -> bool {
        for v in &self.episode {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.clips {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.lease_id,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.episode)?;
                }
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clips)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.lease_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.lease_id);
        }
        if let Some(ref v) = self.episode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.clips {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.lease_id.is_empty() {
            os.write_string(1, &self.lease_id)?;
        }
        if let Some(ref v) = self.episode.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.clips {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PendingResearchItem {
        PendingResearchItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "lease_id",
                |m: &PendingResearchItem| &m.lease_id,
                |m: &mut PendingResearchItem| &mut m.lease_id,
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<EpisodeInfo>,
                >(
                    "episode",
                    |m: &PendingResearchItem| &m.episode,
                    |m: &mut PendingResearchItem| &mut m.episode,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<ClipInfo>,
                >(
                    "clips",
                    |m: &PendingResearchItem| &m.clips,
                    |m: &mut PendingResearchItem| &mut m.clips,
                ),
            );
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PendingResearchItem>(
                "PendingResearchItem",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static PendingResearchItem {
        static instance: ::protobuf::rt::LazyV2<PendingResearchItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PendingResearchItem::new)
    }
}

impl ::protobuf::Clear for PendingResearchItem {
    fn clear(&mut self) {
        self.lease_id.clear();
        self.episode.clear();
        self.clips.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PendingResearchItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PendingResearchItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct CompletedResearchItem {
    // message fields
    pub research_date: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub episode_info: ::protobuf::SingularPtrField<EpisodeInfo>,
    pub clip_info: ::protobuf::SingularPtrField<ClipInfo>,
    pub episode_duration: i64,
    pub episode_hash: ::std::string::String,
    pub clip_duration: i64,
    pub clip_hash: ::std::string::String,
    pub clip_offsets: ::std::vec::Vec<i64>,
    pub lease_id: ::std::string::String,
    pub revoke_lease: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompletedResearchItem {
    fn default() -> &'a CompletedResearchItem {
        <CompletedResearchItem as ::protobuf::Message>::default_instance()
    }
}

impl CompletedResearchItem {
    pub fn new() -> CompletedResearchItem {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp research_date = 1;

    pub fn get_research_date(&self) -> &::protobuf::well_known_types::Timestamp {
        self.research_date.as_ref().unwrap_or_else(|| {
            <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance()
        })
    }
    pub fn clear_research_date(&mut self) {
        self.research_date.clear();
    }

    pub fn has_research_date(&self) -> bool {
        self.research_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_research_date(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.research_date = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_research_date(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.research_date.is_none() {
            self.research_date.set_default();
        }
        self.research_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_research_date(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.research_date
            .take()
            .unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .contracts.EpisodeInfo episode_info = 2;

    pub fn get_episode_info(&self) -> &EpisodeInfo {
        self.episode_info
            .as_ref()
            .unwrap_or_else(|| <EpisodeInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_episode_info(&mut self) {
        self.episode_info.clear();
    }

    pub fn has_episode_info(&self) -> bool {
        self.episode_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_episode_info(&mut self, v: EpisodeInfo) {
        self.episode_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_episode_info(&mut self) -> &mut EpisodeInfo {
        if self.episode_info.is_none() {
            self.episode_info.set_default();
        }
        self.episode_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_episode_info(&mut self) -> EpisodeInfo {
        self.episode_info
            .take()
            .unwrap_or_else(|| EpisodeInfo::new())
    }

    // .contracts.ClipInfo clip_info = 3;

    pub fn get_clip_info(&self) -> &ClipInfo {
        self.clip_info
            .as_ref()
            .unwrap_or_else(|| <ClipInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_clip_info(&mut self) {
        self.clip_info.clear();
    }

    pub fn has_clip_info(&self) -> bool {
        self.clip_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clip_info(&mut self, v: ClipInfo) {
        self.clip_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clip_info(&mut self) -> &mut ClipInfo {
        if self.clip_info.is_none() {
            self.clip_info.set_default();
        }
        self.clip_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_clip_info(&mut self) -> ClipInfo {
        self.clip_info.take().unwrap_or_else(|| ClipInfo::new())
    }

    // int64 episode_duration = 4;

    pub fn get_episode_duration(&self) -> i64 {
        self.episode_duration
    }
    pub fn clear_episode_duration(&mut self) {
        self.episode_duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_episode_duration(&mut self, v: i64) {
        self.episode_duration = v;
    }

    // string episode_hash = 5;

    pub fn get_episode_hash(&self) -> &str {
        &self.episode_hash
    }
    pub fn clear_episode_hash(&mut self) {
        self.episode_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_episode_hash(&mut self, v: ::std::string::String) {
        self.episode_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_episode_hash(&mut self) -> &mut ::std::string::String {
        &mut self.episode_hash
    }

    // Take field
    pub fn take_episode_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.episode_hash, ::std::string::String::new())
    }

    // int64 clip_duration = 6;

    pub fn get_clip_duration(&self) -> i64 {
        self.clip_duration
    }
    pub fn clear_clip_duration(&mut self) {
        self.clip_duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_clip_duration(&mut self, v: i64) {
        self.clip_duration = v;
    }

    // string clip_hash = 7;

    pub fn get_clip_hash(&self) -> &str {
        &self.clip_hash
    }
    pub fn clear_clip_hash(&mut self) {
        self.clip_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_clip_hash(&mut self, v: ::std::string::String) {
        self.clip_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clip_hash(&mut self) -> &mut ::std::string::String {
        &mut self.clip_hash
    }

    // Take field
    pub fn take_clip_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clip_hash, ::std::string::String::new())
    }

    // repeated int64 clip_offsets = 8;

    pub fn get_clip_offsets(&self) -> &[i64] {
        &self.clip_offsets
    }
    pub fn clear_clip_offsets(&mut self) {
        self.clip_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_clip_offsets(&mut self, v: ::std::vec::Vec<i64>) {
        self.clip_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clip_offsets(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.clip_offsets
    }

    // Take field
    pub fn take_clip_offsets(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.clip_offsets, ::std::vec::Vec::new())
    }

    // string lease_id = 9;

    pub fn get_lease_id(&self) -> &str {
        &self.lease_id
    }
    pub fn clear_lease_id(&mut self) {
        self.lease_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_lease_id(&mut self, v: ::std::string::String) {
        self.lease_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lease_id(&mut self) -> &mut ::std::string::String {
        &mut self.lease_id
    }

    // Take field
    pub fn take_lease_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lease_id, ::std::string::String::new())
    }

    // bool revoke_lease = 10;

    pub fn get_revoke_lease(&self) -> bool {
        self.revoke_lease
    }
    pub fn clear_revoke_lease(&mut self) {
        self.revoke_lease = false;
    }

    // Param is passed by value, moved
    pub fn set_revoke_lease(&mut self, v: bool) {
        self.revoke_lease = v;
    }
}

impl ::protobuf::Message for CompletedResearchItem {
    fn is_initialized(&self) -> bool {
        for v in &self.research_date {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.episode_info {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.clip_info {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.research_date,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self.episode_info,
                    )?;
                }
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.clip_info)?;
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.episode_duration = tmp;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.episode_hash,
                    )?;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.clip_duration = tmp;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.clip_hash,
                    )?;
                }
                8 => {
                    ::protobuf::rt::read_repeated_int64_into(
                        wire_type,
                        is,
                        &mut self.clip_offsets,
                    )?;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.lease_id,
                    )?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.revoke_lease = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.research_date.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.episode_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.clip_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.episode_duration != 0 {
            my_size += ::protobuf::rt::value_size(
                4,
                self.episode_duration,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.episode_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.episode_hash);
        }
        if self.clip_duration != 0 {
            my_size += ::protobuf::rt::value_size(
                6,
                self.clip_duration,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.clip_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.clip_hash);
        }
        for value in &self.clip_offsets {
            my_size +=
                ::protobuf::rt::value_size(8, *value, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.lease_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.lease_id);
        }
        if self.revoke_lease != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.research_date.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.episode_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.clip_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.episode_duration != 0 {
            os.write_int64(4, self.episode_duration)?;
        }
        if !self.episode_hash.is_empty() {
            os.write_string(5, &self.episode_hash)?;
        }
        if self.clip_duration != 0 {
            os.write_int64(6, self.clip_duration)?;
        }
        if !self.clip_hash.is_empty() {
            os.write_string(7, &self.clip_hash)?;
        }
        for v in &self.clip_offsets {
            os.write_int64(8, *v)?;
        }
        if !self.lease_id.is_empty() {
            os.write_string(9, &self.lease_id)?;
        }
        if self.revoke_lease != false {
            os.write_bool(10, self.revoke_lease)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompletedResearchItem {
        CompletedResearchItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>,
                >(
                    "research_date",
                    |m: &CompletedResearchItem| &m.research_date,
                    |m: &mut CompletedResearchItem| &mut m.research_date,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<EpisodeInfo>,
                >(
                    "episode_info",
                    |m: &CompletedResearchItem| &m.episode_info,
                    |m: &mut CompletedResearchItem| &mut m.episode_info,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<ClipInfo>,
                >(
                    "clip_info",
                    |m: &CompletedResearchItem| &m.clip_info,
                    |m: &mut CompletedResearchItem| &mut m.clip_info,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt64,
            >(
                "episode_duration",
                |m: &CompletedResearchItem| &m.episode_duration,
                |m: &mut CompletedResearchItem| &mut m.episode_duration,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "episode_hash",
                |m: &CompletedResearchItem| &m.episode_hash,
                |m: &mut CompletedResearchItem| &mut m.episode_hash,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt64,
            >(
                "clip_duration",
                |m: &CompletedResearchItem| &m.clip_duration,
                |m: &mut CompletedResearchItem| &mut m.clip_duration,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "clip_hash",
                |m: &CompletedResearchItem| &m.clip_hash,
                |m: &mut CompletedResearchItem| &mut m.clip_hash,
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt64,
            >(
                "clip_offsets",
                |m: &CompletedResearchItem| &m.clip_offsets,
                |m: &mut CompletedResearchItem| &mut m.clip_offsets,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "lease_id",
                |m: &CompletedResearchItem| &m.lease_id,
                |m: &mut CompletedResearchItem| &mut m.lease_id,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "revoke_lease",
                |m: &CompletedResearchItem| &m.revoke_lease,
                |m: &mut CompletedResearchItem| &mut m.revoke_lease,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CompletedResearchItem>(
                "CompletedResearchItem",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static CompletedResearchItem {
        static instance: ::protobuf::rt::LazyV2<CompletedResearchItem> =
            ::protobuf::rt::LazyV2::INIT;
        instance.get(CompletedResearchItem::new)
    }
}

impl ::protobuf::Clear for CompletedResearchItem {
    fn clear(&mut self) {
        self.research_date.clear();
        self.episode_info.clear();
        self.clip_info.clear();
        self.episode_duration = 0;
        self.episode_hash.clear();
        self.clip_duration = 0;
        self.clip_hash.clear();
        self.clip_offsets.clear();
        self.lease_id.clear();
        self.revoke_lease = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompletedResearchItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompletedResearchItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18protobuf/contracts.proto\x12\tcontracts\x1a\x1fgoogle/protobuf/tim\
    estamp.proto\"\xe1\x02\n\x08ClipInfo\x12L\n\x14initial_date_curated\x18\
    \x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x12initialDateCurated\
    \x12F\n\x11last_date_curated\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.T\
    imestampR\x0flastDateCurated\x12/\n\x13curator_information\x18\x03\x20\
    \x01(\tR\x12curatorInformation\x12\x14\n\x05title\x18\x04\x20\x01(\tR\
    \x05title\x12\x20\n\x0bdescription\x18\x05\x20\x01(\tR\x0bdescription\
    \x12\x1b\n\tmedia_uri\x18\x06\x20\x01(\tR\x08mediaUri\x12\x1d\n\nmedia_t\
    ype\x18\x07\x20\x01(\tR\tmediaType\x12\x1a\n\x08priority\x18\x08\x20\x01\
    (\x05R\x08priority\"\x9f\x03\n\x0bEpisodeInfo\x12L\n\x14initial_date_cur\
    ated\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x12initialDate\
    Curated\x12F\n\x11last_date_curated\x18\x02\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\x0flastDateCurated\x12/\n\x13curator_information\x18\
    \x03\x20\x01(\tR\x12curatorInformation\x129\n\ndate_aired\x18\x04\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tdateAired\x12\x14\n\x05title\
    \x18\x05\x20\x01(\tR\x05title\x12\x20\n\x0bdescription\x18\x06\x20\x01(\
    \tR\x0bdescription\x12\x1b\n\tmedia_uri\x18\x07\x20\x01(\tR\x08mediaUri\
    \x12\x1d\n\nmedia_type\x18\x08\x20\x01(\tR\tmediaType\x12\x1a\n\x08prior\
    ity\x18\t\x20\x01(\x05R\x08priority\"\x8d\x01\n\x13PendingResearchItem\
    \x12\x19\n\x08lease_id\x18\x01\x20\x01(\tR\x07leaseId\x120\n\x07episode\
    \x18\x02\x20\x01(\x0b2\x16.contracts.EpisodeInfoR\x07episode\x12)\n\x05c\
    lips\x18\x03\x20\x03(\x0b2\x13.contracts.ClipInfoR\x05clips\"\xb6\x03\n\
    \x15CompletedResearchItem\x12?\n\rresearch_date\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0cresearchDate\x129\n\x0cepisode_info\
    \x18\x02\x20\x01(\x0b2\x16.contracts.EpisodeInfoR\x0bepisodeInfo\x120\n\
    \tclip_info\x18\x03\x20\x01(\x0b2\x13.contracts.ClipInfoR\x08clipInfo\
    \x12)\n\x10episode_duration\x18\x04\x20\x01(\x03R\x0fepisodeDuration\x12\
    !\n\x0cepisode_hash\x18\x05\x20\x01(\tR\x0bepisodeHash\x12#\n\rclip_dura\
    tion\x18\x06\x20\x01(\x03R\x0cclipDuration\x12\x1b\n\tclip_hash\x18\x07\
    \x20\x01(\tR\x08clipHash\x12!\n\x0cclip_offsets\x18\x08\x20\x03(\x03R\
    \x0bclipOffsets\x12\x19\n\x08lease_id\x18\t\x20\x01(\tR\x07leaseId\x12!\
    \n\x0crevoke_lease\x18\n\x20\x01(\x08R\x0brevokeLeaseB\x17Z\x15go/intern\
    al/contractsJ\xaa\x0e\n\x06\x12\x04\0\0.\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x01\0\x12\n\t\n\x02\x03\0\x12\x03\x03\0)\n\
    \x08\n\x01\x08\x12\x03\x04\0,\n\t\n\x02\x08\x0b\x12\x03\x04\0,\n\n\n\x02\
    \x04\0\x12\x04\x06\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x10\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x07\x047\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\x07\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x1e2\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0756\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\
    \x044\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x08\x04\x1d\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x08\x1e/\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0823\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x04#\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x0b\x1e\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t!\"\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\n\x04\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\n\x04\n\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\n\x0b\x10\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\n\x13\x14\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0b\x04\x1b\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x0b\x0b\x16\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b\x19\x1a\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x0c\x04\x19\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0c\x0b\x14\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0c\x17\x18\n\x0b\n\x04\x04\0\x02\
    \x06\x12\x03\r\x04\x1a\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\r\x04\n\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03\r\x0b\x15\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\r\x18\x19\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0e\x04\x17\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x0e\n\x12\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0e\x15\x16\
    \n\n\n\x02\x04\x01\x12\x04\x11\0\x1b\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x11\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x047\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x12\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x12\x1e2\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1256\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x13\x044\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\
    \x13\x04\x1d\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\x1e/\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x1323\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x14\x04#\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x14\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03\x14\x0b\x1e\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03\x14!\"\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x15\x04-\n\x0c\n\
    \x05\x04\x01\x02\x03\x06\x12\x03\x15\x04\x1d\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x15\x1e(\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x15+,\n\
    \x0b\n\x04\x04\x01\x02\x04\x12\x03\x16\x04\x15\n\x0c\n\x05\x04\x01\x02\
    \x04\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x16\
    \x0b\x10\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x16\x13\x14\n\x0b\n\x04\
    \x04\x01\x02\x05\x12\x03\x17\x04\x1b\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\
    \x03\x17\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x17\x0b\x16\n\x0c\
    \n\x05\x04\x01\x02\x05\x03\x12\x03\x17\x19\x1a\n\x0b\n\x04\x04\x01\x02\
    \x06\x12\x03\x18\x04\x19\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x18\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x18\x0b\x14\n\x0c\n\x05\x04\
    \x01\x02\x06\x03\x12\x03\x18\x17\x18\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\
    \x19\x04\x1a\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x19\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x07\x01\x12\x03\x19\x0b\x15\n\x0c\n\x05\x04\x01\x02\x07\
    \x03\x12\x03\x19\x18\x19\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x1a\x04\x17\
    \n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03\x1a\x04\t\n\x0c\n\x05\x04\x01\
    \x02\x08\x01\x12\x03\x1a\n\x12\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\
    \x1a\x15\x16\n\n\n\x02\x04\x02\x12\x04\x1d\0!\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x1d\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1e\x04\x18\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x1e\x0b\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1e\x16\x17\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x1f\x04\x1c\n\x0c\n\x05\x04\x02\x02\
    \x01\x06\x12\x03\x1f\x04\x0f\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1f\
    \x10\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1f\x1a\x1b\n\x0b\n\x04\
    \x04\x02\x02\x02\x12\x03\x20\x04\x20\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\
    \x03\x20\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x20\r\x15\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03\x20\x16\x1b\n\x0c\n\x05\x04\x02\x02\
    \x02\x03\x12\x03\x20\x1e\x1f\n\n\n\x02\x04\x03\x12\x04#\0.\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03#\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x03$\x040\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03$\x04\x1d\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03$\x1e+\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03$./\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03%\x04!\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03%\
    \x04\x0f\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03%\x10\x1c\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03%\x1f\x20\n\x0b\n\x04\x04\x03\x02\x02\x12\
    \x03&\x04\x1b\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03&\x04\x0c\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03&\r\x16\n\x0c\n\x05\x04\x03\x02\x02\x03\
    \x12\x03&\x19\x1a\n\x0b\n\x04\x04\x03\x02\x03\x12\x03'\x04\x1f\n\x0c\n\
    \x05\x04\x03\x02\x03\x05\x12\x03'\x04\t\n\x0c\n\x05\x04\x03\x02\x03\x01\
    \x12\x03'\n\x1a\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03'\x1d\x1e\n\x0b\n\
    \x04\x04\x03\x02\x04\x12\x03(\x04\x1c\n\x0c\n\x05\x04\x03\x02\x04\x05\
    \x12\x03(\x04\n\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03(\x0b\x17\n\x0c\n\
    \x05\x04\x03\x02\x04\x03\x12\x03(\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x05\
    \x12\x03)\x04\x1c\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03)\x04\t\n\x0c\n\
    \x05\x04\x03\x02\x05\x01\x12\x03)\n\x17\n\x0c\n\x05\x04\x03\x02\x05\x03\
    \x12\x03)\x1a\x1b\n\x0b\n\x04\x04\x03\x02\x06\x12\x03*\x04\x19\n\x0c\n\
    \x05\x04\x03\x02\x06\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x03\x02\x06\x01\
    \x12\x03*\x0b\x14\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03*\x17\x18\n\x0b\
    \n\x04\x04\x03\x02\x07\x12\x03+\x04$\n\x0c\n\x05\x04\x03\x02\x07\x04\x12\
    \x03+\x04\x0c\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03+\r\x12\n\x0c\n\x05\
    \x04\x03\x02\x07\x01\x12\x03+\x13\x1f\n\x0c\n\x05\x04\x03\x02\x07\x03\
    \x12\x03+\"#\n\x0b\n\x04\x04\x03\x02\x08\x12\x03,\x04\x18\n\x0c\n\x05\
    \x04\x03\x02\x08\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\
    \x03,\x0b\x13\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x03,\x16\x17\n\x0b\n\
    \x04\x04\x03\x02\t\x12\x03-\x04\x1b\n\x0c\n\x05\x04\x03\x02\t\x05\x12\
    \x03-\x04\x08\n\x0c\n\x05\x04\x03\x02\t\x01\x12\x03-\t\x15\n\x0c\n\x05\
    \x04\x03\x02\t\x03\x12\x03-\x18\x1ab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| parse_descriptor_proto())
}
