// Code generated by MockGen. DO NOT EDIT.
// Source: go/internal/accessors/analyst/command.go

// Package mock_analyst is a generated GoMock package.
package mock_analyst

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	analyst "github.com/jecolasurdo/tbtlarchivist/go/internal/accessors/analyst"
	io "io"
	reflect "reflect"
)

// MockCommandBuilder is a mock of CommandBuilder interface
type MockCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBuilderMockRecorder
}

// MockCommandBuilderMockRecorder is the mock recorder for MockCommandBuilder
type MockCommandBuilderMockRecorder struct {
	mock *MockCommandBuilder
}

// NewMockCommandBuilder creates a new mock instance
func NewMockCommandBuilder(ctrl *gomock.Controller) *MockCommandBuilder {
	mock := &MockCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandBuilder) EXPECT() *MockCommandBuilderMockRecorder {
	return m.recorder
}

// CommandContext mocks base method
func (m *MockCommandBuilder) CommandContext(arg0 context.Context, arg1 string, arg2 ...string) analyst.Command {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommandContext", varargs...)
	ret0, _ := ret[0].(analyst.Command)
	return ret0
}

// CommandContext indicates an expected call of CommandContext
func (mr *MockCommandBuilderMockRecorder) CommandContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandContext", reflect.TypeOf((*MockCommandBuilder)(nil).CommandContext), varargs...)
}

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// StdoutPipe mocks base method
func (m *MockCommand) StdoutPipe() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdoutPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdoutPipe indicates an expected call of StdoutPipe
func (mr *MockCommandMockRecorder) StdoutPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdoutPipe", reflect.TypeOf((*MockCommand)(nil).StdoutPipe))
}

// StdinPipe mocks base method
func (m *MockCommand) StdinPipe() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdinPipe")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdinPipe indicates an expected call of StdinPipe
func (mr *MockCommandMockRecorder) StdinPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdinPipe", reflect.TypeOf((*MockCommand)(nil).StdinPipe))
}

// Start mocks base method
func (m *MockCommand) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockCommandMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommand)(nil).Start))
}

// Wait mocks base method
func (m *MockCommand) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait
func (mr *MockCommandMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCommand)(nil).Wait))
}
