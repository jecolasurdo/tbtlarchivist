// Code generated by MockGen. DO NOT EDIT.
// Source: go/internal/accessors/analyst/analyzer.go

// Package mock_analyst is a generated GoMock package.
package mock_analyst

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/jecolasurdo/tbtlarchivist/go/internal/contracts"
	reflect "reflect"
)

// MockAnalyzer is a mock of Analyzer interface
type MockAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer
type MockAnalyzerMockRecorder struct {
	mock *MockAnalyzer
}

// NewMockAnalyzer creates a new mock instance
func NewMockAnalyzer(ctrl *gomock.Controller) *MockAnalyzer {
	mock := &MockAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalyzer) EXPECT() *MockAnalyzerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockAnalyzer) Run(arg0 context.Context, arg1 *contracts.PendingResearchItem) (<-chan *contracts.CompletedResearchItem, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(<-chan *contracts.CompletedResearchItem)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockAnalyzerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAnalyzer)(nil).Run), arg0, arg1)
}
